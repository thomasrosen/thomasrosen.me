{"version":3,"sources":["components/pages/playlist.js"],"names":["Playlist","_useState","useState","Songs","Name","Date","_useState2","_slicedToArray","playlist","setPlaylist","_useState3","_useState4","loading","setLoading","_useState5","_useState6","error","setError","useEffect","fetch","window","location","pathname","split","pop","then","response","json","data","catch","genres","reduce","acc","song","genre","Genre","hasOwnProperty","Object","entries","sort","a","b","map","_ref","_ref2","slice","get_genres","song_count","length","_jsxs","className","concat","font","children","_jsx","message","_Fragment","itemprop","datetime","title","disabled","style","gridTemplateColumns","index","album_artwork","Title","url","play_count","href","target","rel","width","height","src","alt","filter","marginBlockStart","Artist","Album","display","alignItems","gap","flexWrap","Duration","Boolean","item","React","Fragment","Dot"],"mappings":"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","file":"static/js/6.29771f78.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport Dot from '../dot.js'\n\nfunction get_genres(playlist) {\n  let genres = playlist.Songs\n    // sort the genres by count with reduce\n    .reduce((acc, song) => {\n      const genre = song.Genre\n      if (!acc.hasOwnProperty(genre)) {\n        acc[genre] = 0\n      }\n      acc[genre] += 1\n      return acc\n    }, {})\n\n  genres = Object.entries(genres)\n    .sort((a, b) => b[1] - a[1])\n    .map(([genre, count]) => genre)\n    .slice(0, 3) // only keep the top 3 genres\n\n  return genres\n}\n\nexport default function Playlist() {\n  const [playlist, setPlaylist] = useState({\n    Songs: [],\n    Name: '',\n    Date: '',\n  })\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    // fetch the article from /music/playlists/{slug}.json\n    fetch('/static/music/playlists/' + window.location.pathname.split('/').pop() + '.json')\n      .then(response => response.json())\n      .then(data => {\n        setPlaylist(data)\n        setLoading(false)\n      })\n      .catch(error => {\n        setError(error)\n        setLoading(false)\n      })\n  }, [])\n\n  const date_month = ''\n\n  const genres = get_genres(playlist)\n\n  const song_count = playlist.Songs.length\n\n  return <div className={`tab_content article ${!!playlist && playlist.font === 'serif' ? 'serif_font' : 'sans_serif_font'}`}>\n    {loading && <p>Loading article...</p>}\n    {error && <p>Error loading article: {error.message}</p>}\n\n    {\n      !!playlist\n        ? <>\n\n          <h2 itemprop=\"headline\">\n            <time datetime={date_month} title={date_month} itemprop=\"datePublished\">{playlist.Name}</time>\n          </h2>\n\n          <p><strong>\n            <span className=\"tag_row\" itemprop=\"keywords\">\n              {genres.map(genre => <button className=\"small\" disabled key={genre}>{genre}</button>)}\n              <br />\n              <span>{song_count === 1 ? 'One Song' : `${song_count} Songs`}</span>\n            </span>\n          </strong></p>\n\n          <hr />\n\n          <div className=\"links_grid\" style={{\n            gridTemplateColumns: 'auto'\n          }}>\n            {song_count > 0 && playlist.Songs.map((song, index) => {\n\n              const album_artwork = song['Album Artwork']\n              const title = song.Title\n              const genre = song.Genre\n              const url = song['Store URL']\n              const play_count = song['Play Count']\n\n              return <div\n                key={index}\n                className=\"links_grid_item color_inherit\"\n              >\n\n                <a\n                  href={url}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  className=\"inherit_color\"\n                >\n                  <div className=\"image_container\" style={{\n                    width: '64px',\n                    height: '64px',\n                  }}>\n                    {\n                      typeof album_artwork === 'string' && album_artwork.length > 0\n                        ? <img src={album_artwork} alt={title} style={{\n                            filter: 'contrast(1.1) saturate(1.2)',\n                        }} />\n                        : <div></div>\n                    }\n                  </div>\n                </a>\n\n                <div>\n                  <a\n                    href={url}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                    className=\"inherit_color\"\n                  >\n                    <h3 className=\"big\" style={{ marginBlockStart: '0' }}>\n                      {title}\n                    </h3>\n                  </a>\n\n                  <p>\n                    {\n                      typeof song.Artist === 'string' && song.Artist.length > 0\n                        ? <strong>{song.Artist}</strong>\n                        : null\n                    }\n                    {\n                      typeof song.Album === 'string' && song.Album.length > 0\n                        ? (\n                          typeof song.Artist === 'string' && song.Artist.length > 0\n                            ? `: ${song.Album}`\n                            : song.Album\n                        )\n                        : null\n                    }\n                  </p>\n\n                  <p><strong style={{\n                    display: 'inline-flex',\n                    alignItems: 'center',\n                    gap: '5px 15px',\n                    flexWrap: 'wrap',\n                  }}>\n                    {\n                      [\n                        (\n                          typeof genre === 'string' && genre.length > 0\n                            ? <span className=\"tag_row\" title={`Genre: ${genre}`}>\n                              <button className=\"small\" disabled key={genre}>{genre}</button>\n                            </span>\n                            : null\n                          ),\n                          <time title={`Duration: ${song.Duration} min`}>{song.Duration} min</time>,\n                          (\n                            play_count > 0\n                              ? <span title={`Play Count: ${play_count}`}>ðŸ”„ {play_count}</span>\n                              : null\n                          ),\n                          song['Is Explicit'] === '1' ? <span title=\"Song is Explicit\" alt=\"Song is Explicit\">ðŸ”¥</span> : null,\n                      ]\n                        .filter(Boolean)\n                        .map((item, index) => <React.Fragment key={index}>{item}</React.Fragment>)\n                    }\n                  </strong></p>\n                </div>\n              </div>\n            })}\n          </div>\n\n          <br />\n          <br />\n          <center>\n            <Dot />\n          </center>\n          \n        </>\n        : null\n    }\n  </div>\n}\n"],"sourceRoot":""}