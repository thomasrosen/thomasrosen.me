{"version":3,"sources":["components/pages/playlists.js"],"names":["Playlists","_useState","useState","_useState2","_slicedToArray","playlists","setPlaylists","_useState3","_useState4","loading","setLoading","_useState5","_useState6","error","setError","useEffect","fetch","then","response","json","data","reverse","catch","_jsxs","className","children","_jsx","style","display","flexWrap","gap","target","rel","href","message","gridTemplateColumns","length","map","playlist","coverphoto","maxWidth","maxHeight","Link","to","name","src","alt","filter","datetime","date_month","title","count","alignItems","Array","isArray","genres","genre","disabled","Boolean","item","index","React","Fragment"],"mappings":"gOAOe,SAASA,IACtB,IAAAC,EAAkCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAvCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,EAA8BL,oBAAS,GAAKM,EAAAJ,YAAAG,EAAA,GAArCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,EAA0BT,mBAAS,MAAKU,EAAAR,YAAAO,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAetB,OAbAG,qBAAU,WACRC,MAAM,gCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAM,IAChCF,MAAK,SAAAG,GACJd,EAAac,EAAKf,UAAUgB,WAC5BX,GAAW,EACb,IACCY,OAAM,SAAAT,GACLC,EAASD,GACTH,GAAW,EACb,GACJ,GAAG,IAEIa,eAAA,OAAKC,UAAU,cAAaC,SAAA,CACjCC,cAAA,MAAAD,SAAI,cAEJC,cAAA,KAAAD,SAAG,0HAGHC,cAAA,KAAAD,SAAG,4FAIHC,cAAA,SAEAA,cAAA,OAAKC,MAAO,CACVC,QAAS,cACTC,SAAU,OACVC,IAAK,QACLL,SAEAC,cAAA,KAAGK,OAAO,SAASC,IAAI,aAAaC,KAAK,8CAA6CR,SACpFC,cAAA,UAAAD,SAAQ,+CAIZC,cAAA,SACAA,cAAA,SACAA,cAAA,SAECjB,GAAWiB,cAAA,KAAAD,SAAG,yBACdZ,GAASU,eAAA,KAAAE,SAAA,CAAG,4BAA0BZ,EAAMqB,WAE7CR,cAAA,OAAKF,UAAU,aAAaG,MAAO,CACjCQ,oBAAqB,QACrBV,SACCpB,EAAU+B,OAAS,GAAK/B,EAAUgC,KAAI,SAAAC,GAAQ,OAAIf,eAAA,OAEjDC,UAAU,kBAAiBC,SAAA,CAGM,kBAAxBa,EAASC,YAA2BD,EAASC,WAAWH,OAAS,EACpEV,cAAA,OAAKF,UAAU,kBAAkBG,MAAO,CACxCa,SAAU,QACVC,UAAW,SACXhB,SACAC,cAACgB,IAAI,CAACC,GAAI,cAAgBL,EAASM,KAAKnB,SACtCC,cAAA,OAAKmB,IAAKP,EAASC,WAAYO,IAAKR,EAASM,KAAMjB,MAAO,CACxDoB,OAAQ,qCAIZ,KAGNxB,eAAA,OAAAE,SAAA,CACEC,cAAA,MAAIF,UAAU,MAAKC,SACjBC,cAACgB,IAAI,CAACC,GAAI,cAAgBL,EAASM,KAAKnB,SACtCC,cAAA,QAAMsB,SAAUV,EAASW,WAAYC,MAAOZ,EAASW,WAAWxB,SAC7Da,EAASM,WAIhBlB,cAAA,KAAAD,SACEC,cAAA,UAAAD,SACqB,IAAnBa,EAASa,MACL,WACAb,EAASa,MAAQ,aAGzBzB,cAAA,KAAAD,SAAGC,cAAA,UAAQC,MAAO,CAChBC,QAAS,cACTwB,WAAY,SACZtB,IAAK,WACLD,SAAU,QACVJ,SAEE,CAEI4B,MAAMC,QAAQhB,EAASiB,SAAWjB,EAASiB,OAAOnB,OAAS,EACvDV,cAAA,QAAMF,UAAU,UAASC,SACxBa,EAASiB,OAAOlB,KAAI,SAAAmB,GAAK,OAAI9B,cAAA,UAAQF,UAAU,QAAQiC,UAAQ,EAAAhC,SAAc+B,GAARA,EAAuB,MAE7F,MAGLT,OAAOW,SACPrB,KAAI,SAACsB,EAAMC,GAAK,OAAKlC,cAACmC,IAAMC,SAAQ,CAAArC,SAAckC,GAARC,EAA8B,aAlD5EtB,EAASM,KAsDV,QAIZ,C","file":"static/js/5.c076ea33.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport '../../fonts/petrona-v28-latin/index.css'\n\nimport { Link } from 'react-router-dom'\n// import Dot from '../dot.js'\n\nexport default function Playlists() {\n  const [playlists, setPlaylists] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    fetch('/static/music/playlists.json')\n      .then(response => response.json())\n      .then(data => {\n        setPlaylists(data.playlists.reverse())\n        setLoading(false)\n      })\n      .catch(error => {\n        setError(error)\n        setLoading(false)\n      })\n  }, [])\n\n  return <div className=\"tab_content\">\n    <h2>Playlists</h2>\n\n    <p>\n      You ever wanted to knwo what I'm listening to? Well, you can! I've been keeping track of what I listen to since 2018.\n    </p>\n    <p>\n      The following playlists are songs I liked or discovered in the month they were created.\n    </p>\n\n    <br />\n\n    <div style={{\n      display: 'inline-flex',\n      flexWrap: 'wrap',\n      gap: '10px',\n    }}>\n\n      <a target=\"_blank\" rel=\"noreferrer\" href=\"https://music.apple.com/profile/thomasrosen\">\n        <button>follow what I listen to on Apple Music</button>\n      </a>\n    </div>\n\n    <br />\n    <br />\n    <br />\n\n    {loading && <p>Loading playlists...</p>}\n    {error && <p>Error loading playlists: {error.message}</p>}\n\n    <div className=\"links_grid\" style={{\n      gridTemplateColumns: 'auto'\n    }}>\n      {playlists.length > 0 && playlists.map(playlist => <div\n        key={playlist.name}\n        className=\"links_grid_item\"\n      >\n        {\n          typeof playlist.coverphoto === 'string' && playlist.coverphoto.length > 0\n            ? <div className=\"image_container\" style={{\n              maxWidth: '128px',\n              maxHeight: '128px',\n            }}>\n              <Link to={'/playlists/' + playlist.name}>\n                <img src={playlist.coverphoto} alt={playlist.name} style={{\n                  filter: 'contrast(1.1) saturate(1.2)',\n                }} />\n              </Link>\n            </div>\n            : null\n        }\n\n        <div>\n          <h3 className=\"big\">\n            <Link to={'/playlists/' + playlist.name}>\n              <time datetime={playlist.date_month} title={playlist.date_month}>\n                {playlist.name}\n              </time>\n            </Link>\n          </h3>\n          <p>\n            <strong>{\n              playlist.count === 1\n                ? 'One Song'\n                : playlist.count + ' Songs' \n            }</strong>\n          </p>\n          <p><strong style={{\n            display: 'inline-flex',\n            alignItems: 'center',\n            gap: '5px 15px',\n            flexWrap: 'wrap',\n          }}>\n            {\n              [\n                (\n                  Array.isArray(playlist.genres) && playlist.genres.length > 0\n                    ? <span className=\"tag_row\">\n                      {playlist.genres.map(genre => <button className=\"small\" disabled key={genre}>{genre}</button>)}\n                    </span>\n                    : null\n                ),\n              ]\n                .filter(Boolean)\n                .map((item, index) => <React.Fragment key={index}>{item}</React.Fragment>)\n            }\n          </strong></p>\n        </div>\n      </div>)}\n    </div>\n\n  </div>\n}\n"],"sourceRoot":""}