{"version":3,"sources":["components/pages/articles.js"],"names":["units","year","month","day","hour","minute","second","rtf","Intl","RelativeTimeFormat","numeric","Articles","useState","articles","setArticles","loading","setLoading","error","setError","useEffect","fetch","then","response","json","data","sort","a","b","Date","date","map","article","d1","d2","elapsed","getTime","u","Math","abs","format","round","getRelativeTime","catch","className","message","style","gridTemplateColumns","length","font","to","slug","title","tags","tag","disabled"],"mappings":"uNAOMA,EAAQ,CACVC,KAAM,QACNC,MAAQ,OACRC,IAAK,MACLC,KAAM,KACNC,OAAQ,IACRC,OAAQ,KAGNC,EAAM,IAAIC,KAAKC,mBAAmB,KAAM,CAAEC,QAAS,SAa1C,SAASC,IAAY,IAAD,EACDC,mBAAS,IADR,mBAC1BC,EAD0B,KAChBC,EADgB,OAEHF,oBAAS,GAFN,mBAE1BG,EAF0B,KAEjBC,EAFiB,OAGPJ,mBAAS,MAHF,mBAG1BK,EAH0B,KAGnBC,EAHmB,KAwBjC,OAnBAC,qBAAU,WACRC,MAAM,uBACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJA,EAAKX,SAAWW,EAAKX,SAClBY,MAAK,SAACC,EAAGC,GAAJ,OAAU,IAAIC,KAAKD,EAAEE,MAAQ,IAAID,KAAKF,EAAEG,SAC7CC,KAAI,SAAAC,GAEH,OADAA,EAAQF,KAvBI,SAACG,GAAyB,IAArBC,EAAoB,uDAAf,IAAIL,KAC5BM,EAAUF,EAAGG,UAAYF,EAAGE,UAGlC,IAAK,IAAMC,KAAKpC,EACZ,GAAIqC,KAAKC,IAAIJ,GAAWlC,EAAMoC,IAAY,WAANA,EAChC,OAAO7B,EAAIgC,OAAOF,KAAKG,MAAMN,EAAUlC,EAAMoC,IAAKA,GAiBnCK,CAAgB,IAAIb,KAAKG,EAAQF,OACzCE,KAEXjB,EAAYU,EAAKX,UACjBG,GAAW,MAEZ0B,OAAM,SAAAzB,GACLC,EAASD,GACTD,GAAW,QAEd,IAEI,sBAAK2B,UAAU,cAAf,UACL,sCAEC5B,GAAW,oDACXE,GAAS,yDAA4BA,EAAM2B,WAE5C,qBAAKD,UAAU,aAAaE,MAAO,CACjCC,oBAAqB,QADvB,SAGGjC,EAASkC,OAAS,GAAKlC,EAASiB,KAAI,SAAAC,GAAO,OAAI,sBAE9CY,UAAaZ,GAA4B,UAAjBA,EAAQiB,KAAmB,aAAe,kBAFpB,UAI9C,oBAAIL,UAAU,MAAd,SACE,cAAC,IAAD,CAAMM,GAAI,aAAelB,EAAQmB,KAAjC,SACGnB,EAAQoB,UAGb,4BAAG,mCACApB,EAAQF,KADR,cACgB,sBAAMc,UAAU,UAAhB,SAA2BZ,EAAQqB,KAAKtB,KAAI,SAAAuB,GAAG,OAAI,wBAAQV,UAAU,QAAQW,UAAQ,EAAlC,SAA8CD,GAANA,eATzGtB,EAAQmB","file":"static/js/4.6e35d01a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport '../../fonts/petrona-v28-latin/index.css'\n\nimport { Link } from 'react-router-dom'\n// import Dot from '../dot.js'\n\nconst units = {\n    year: 24 * 60 * 60 * 1000 * 365,\n    month: (24 * 60 * 60 * 1000 * 365) / 12,\n    day: 24 * 60 * 60 * 1000,\n    hour: 60 * 60 * 1000,\n    minute: 60 * 1000,\n    second: 1000\n};\n\nconst rtf = new Intl.RelativeTimeFormat('en', { numeric: 'auto' });\n\nconst getRelativeTime = (d1, d2 = new Date()) => {\n    const elapsed = d1.getTime() - d2.getTime();\n\n    // \"Math.abs\" accounts for both \"past\" & \"future\" scenarios\n    for (const u in units) {\n        if (Math.abs(elapsed) > units[u] || u === 'second') {\n            return rtf.format(Math.round(elapsed / units[u]), u);\n        }\n    }\n};\n\nexport default function Articles() {\n  const [articles, setArticles] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    fetch('/blog/articles.json')\n      .then(response => response.json())\n      .then(data => {\n        data.articles = data.articles\n          .sort((a, b) => new Date(b.date) - new Date(a.date))\n          .map(article => {\n            article.date = getRelativeTime(new Date(article.date))\n            return article\n          })\n        setArticles(data.articles)\n        setLoading(false)\n      })\n      .catch(error => {\n        setError(error)\n        setLoading(false)\n      })\n  }, [])\n\n  return <div className=\"tab_content\">\n    <h2>Blog</h2>\n\n    {loading && <p>Loading articles...</p>}\n    {error && <p>Error loading articles: {error.message}</p>}\n\n    <div className=\"links_grid\" style={{\n      gridTemplateColumns: 'auto'\n    }}>\n      {articles.length > 0 && articles.map(article => <div\n        key={article.slug}\n        className={!!article && article.font === 'serif' ? 'serif_font' : 'sans_serif_font'}\n      >\n        <h3 className=\"big\">\n          <Link to={'/articles/' + article.slug}>\n            {article.title}\n          </Link>\n        </h3>\n        <p><strong>\n          {article.date} — <span className=\"tag_row\">{article.tags.map(tag => <button className=\"small\" disabled key={tag}>{tag}</button>)}</span>\n        </strong></p>\n      </div>)}\n    </div>\n\n  </div>\n}\n\n/*\nexport function Article() {\n  const [article, setArticle] = useState(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    // fetch the article from /blog/articles/{slug}.json\n    fetch('/blog/articles/' + window.location.pathname.split('/').pop() + '.json')\n      .then(response => response.json())\n      .then(data => {\n        data.article.date = getRelativeTime(new Date(data.article.date))\n\n        setArticle(data.article)\n        setLoading(false)\n      })\n      .catch(error => {\n        setError(error)\n        setLoading(false)\n      })\n  }, [])\n\n  return <div className={`tab_content article ${!!article && article.font === 'serif' ? 'serif_font' : 'sans_serif_font' }`}>\n    {loading && <p>Loading article...</p>}\n    {error && <p>Error loading article: {error.message}</p>}\n\n    {\n      !!article\n        ? <>\n          <h2>{article.title}</h2>\n          <p><strong>\n            {article.date} — <span className=\"tag_row\">{article.tags.map(tag => <button className=\"small\" disabled key={tag}>{tag}</button>)}</span>\n          </strong></p>\n          <div dangerouslySetInnerHTML={{ __html: article.html }} />\n          <Dot />\n        </>\n        : null\n    }\n  </div>\n}\n*/\n"],"sourceRoot":""}